inputs['on.peak.rate']
inputs['on.peak.rate',]
inputs[['on.peak.rate']]
inputs[[on.peak.rate]]
inputs['on.peak.rate',]
b.energy <- (inputs['on.peak.rate',] - inputs['off.peak.rate',]) * inputs['capacity'] * inputs['load.shift.duration'] * inputs['load.shifting.periods']
b.energy <- (inputs['on.peak.rate',] - inputs['off.peak.rate',]) * inputs['capacity',] * inputs['load.shift.duration',] * inputs['load.shifting.periods',]
b.energy
inputs['on.peak.rate',1]
b.demand <- inputs['demand.charge',] * inputs['capacity',1] * 12 * 1000 # 100 is KW to MW
b.quality <- inputs['cost.per.volt.sag',1] * inputs['volt.sag.count',1]
b.quality
b.total <- b.energy + b.demand + b.quality
source('~/Code/energy_projects/func.r')
source('~/Code/energy_projects/func.r')
percent(0.5)
percent(exercise(inputs, 'capacity',1.10) / b.total - 1)
source('~/Code/energy_projects/func.r')
ddply(inputs, row.names(inputs),length)
require(plyr)
ddply(inputs, row.names(inputs),length)
ddply(inputs, inputs[1,],length)
inputs$var.name <- row.names(inputs)
inputs
ddply(inputs, var.name, length)
source('~/Code/energy_projects/func.r')
update.packages(c(ggplot2))
update.packages(c('ggplot2'))
update.packages(c('ggplot2','plyr'))
source('~/Code/energy_projects/func.r')
Energy Storage Technology Valuation
========================================================
An R version of the method described in [Energy Storage Technology Valuation Primer](http://www.epri.com/abstracts/Pages/ProductAbstract.aspx?ProductId=000000000001008810) from EPRI.
## Deterministic Model
NPV is calculated in the `npv()` function in `func.r`
Source [here](http://tolstoy.newcastle.edu.au/R/help/05/12/16765.html)
>t = c(-8000, 100, 100, 100, 2000, 3000, 4000, 5000)
>r = 0.1
>npv(r, t)
>[1] 301.1624
```{r}
require(plyr)
require(ggplot2)
source('~/Code/energy_projects/func.r')
inputs <-data.frame(
default=c(
80,20,5,5,10,250,100000,2
)
)
row.names(inputs) <- c(
'on.peak.rate',
'off.peak.rate',
'demand.charge',
'capacity',
'load.shift.duration',
'load.shifting.periods',
'cost.per.volt.sag',
'volt.sag.count'
)
inputs$var.name <- row.names(inputs)
# From http://www.tybecenergy.com/pricehistory/pjm_settle.php
on.peak.rate <- 44.40 # $
off.peak.rate <- 31.13 # $
b.total <- calc.benefits(inputs)
sprintf("$%.f", b.total)
```
Now exercise the model for sensitivity analysis
```{r figure.3-1}
percent(exercise(inputs, 'capacity',1.10) / b.total - 1)
percent(exercise(inputs, 'on.peak.rate',1.10) / b.total - 1)
df.delta10 <- ddply(inputs, .(var.name), function(x){
c( delta10=(exercise(inputs, x$var.name, 1.10 )-b.total)/b.total
)
}
)
df.delta10 <- transform(df.delta10,
var.name = reorder(var.name, delta10))
ggplot(df.delta10, aes(var.name, delta10)) + geom_bar(stat="identity") + coord_flip() + scale_y_continuous(labels=percent, limits=c(-0.05,0.1))
```
# Now examine the change in benefits over a range of different inputs
```{r}
on.peak.rate.alt <- c(50,60,70,80,90,100)
load.shifting.periods.alt <- c(8,9,10,11)
expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shifting.periods.alt"=load.shifting.periods.alt)
inputs
t(inputs)
t(inputs$default)
inputs$default
data.frame(inputs.default)
data.frame(inputs.defaults)
data.frame(inputs$default)
inputs
data.frame('default'=on.peak.rate.alt,'var.name'='on.peak.rate')
rbind(data.frame('default'=on.peak.rate.alt,'var.name'='on.peak.rate'), data.frame('default'=on.peak.rate.alt,var.name='load.shifting.periods.alt'))
rbind(inputs,data.frame('default'=on.peak.rate.alt,'var.name'='on.peak.rate'), data.frame('default'=on.peak.rate.alt,var.name='load.shifting.periods.alt'))
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs[on.peak.rate,] <- on.peak.rate.alt[i]
alt.inputs
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs[on.peak.rate,] <- on.peak.rate.alt[i]
print(alt.inputs)
}
inputs
inputs[on.peak.rate,]
inputs[,on.peak.rate]
inputs[on.peak.rate]
inputs['on.peak.rate']
inputs['on.peak.rate','default']
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print(alt.inputs)
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
calc.benefits(alt.inputs)
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
cat(calc.benefits(alt.inputs))
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print(calc.benefits(alt.inputs))
}
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']
on.peak.rate.alt
on.peak.rate.alt[0]
on.peak.rate.alt[1]
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print(calc.benefits(alt.inputs))
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print(alt.inputs['on.peak.rate'])
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print(alt.inputs['on.peak.rate','default'])
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
calc.benefits(alt.inputs)
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
printcalc.benefits(alt.inputs))
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print(calc.benefits(alt.inputs))
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print( on.peak.rate.alt[i], paste(calc.benefits(alt.inputs))
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
paste() on.peak.rate.alt[i], calc.benefits(alt.inputs))
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
paste( on.peak.rate.alt[i], calc.benefits(alt.inputs))
}
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print(paste( on.peak.rate.alt[i], calc.benefits(alt.inputs)))
}
source('~/Code/energy_projects/func.r')
for(i in 1:length(on.peak.rate.alt)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- on.peak.rate.alt[i]
print(paste( on.peak.rate.alt[i], calc.benefits(alt.inputs)))
}
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shifting.periods.alt"=load.shifting.periods.alt)
alt.vars
alt.vars[i,on.peak.rate.alt]
alt.vars['on.peak.rate.alt']
alt.vars['on.peak.rate.alt',1]
alt.vars[1,'on.peak.rate.alt']
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs['load.shifting.periods','default']  <- alt.vars[i,'load.shifting.periods.alt']
print(paste( alt.vars[i,], calc.benefits(alt.inputs)))
}
str(alt.vars)
alt.vars(1)
alt.vars[1]
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs['load.shifting.periods','default']  <- alt.vars[i,'load.shifting.periods.alt']
print(paste( alt.vars[,i], calc.benefits(alt.inputs)))
}
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs['load.shifting.periods','default']  <- alt.vars[i,'load.shifting.periods.alt']
print(paste( alt.vars[i,], calc.benefits(alt.inputs)))
}
alt.vars[1,]
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs['load.shifting.periods','default']  <- alt.vars[i,'load.shifting.periods.alt']
print(paste( alt.vars[i,] , calc.benefits(alt.inputs) ) )
}
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs['load.shifting.periods','default']  <- alt.vars[i,'load.shifting.periods.alt']
cat(paste ( alt.vars[i,] , calc.benefits(alt.inputs) ) )
}
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs['load.shifting.periods','default']  <- alt.vars[i,'load.shifting.periods.alt']
print(calc.benefits(alt.inputs) )
}
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs['load.shifting.periods','default']  <- alt.vars[i,'load.shifting.periods.alt']
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs['load.shifting.periods','default']  <- alt.vars[i,'load.shifting.periods.alt']
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
calc.benefits(inputs)
alt.inputs$defaults['on.peak.rate']
alt.inputs$default
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs$default['on.peak.rate']  <- alt.vars[i,'on.peak.rate.alt']
alt.inputs$load.shifting.periods['default']  <- alt.vars[i,'load.shifting.periods.alt']
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs$default['on.peak.rate']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs$load.shifting.periods['default']  <- alt.varsload.shifting.periods.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs$default['on.peak.rate']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs$load.shifting.periods['default']  <- alt.vars$load.shifting.periods.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
alt.vars
alt.vars
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shifting.periods.alt"=load.shifting.periods.alt)
alt.vars
alt.vars$on.peak.rate.alt[1]
inputs$default['on.peak.rate']
inputs
inputs['on.peak.rate','default']
Energy Storage Technology Valuation
========================================================
An R version of the method described in [Energy Storage Technology Valuation Primer](http://www.epri.com/abstracts/Pages/ProductAbstract.aspx?ProductId=000000000001008810) from EPRI.
## Deterministic Model
NPV is calculated in the `npv()` function in `func.r`
Source [here](http://tolstoy.newcastle.edu.au/R/help/05/12/16765.html)
>t = c(-8000, 100, 100, 100, 2000, 3000, 4000, 5000)
>r = 0.1
>npv(r, t)
>[1] 301.1624
```{r}
require(plyr)
require(ggplot2)
source('~/Code/energy_projects/func.r')
inputs <-data.frame(
default=c(
80,20,5,5,10,250,100000,2
)
)
row.names(inputs) <- c(
'on.peak.rate',
'off.peak.rate',
'demand.charge',
'capacity',
'load.shift.duration',
'load.shifting.periods',
'cost.per.volt.sag',
'volt.sag.count'
)
inputs$var.name <- row.names(inputs)
# From http://www.tybecenergy.com/pricehistory/pjm_settle.php
on.peak.rate <- 44.40 # $
off.peak.rate <- 31.13 # $
b.total <- calc.benefits(inputs)
sprintf("$%.f", b.total)
```
Now exercise the model for sensitivity analysis
```{r figure.3-1}
percent(exercise(inputs, 'capacity',1.10) / b.total - 1)
percent(exercise(inputs, 'on.peak.rate',1.10) / b.total - 1)
df.delta10 <- ddply(inputs, .(var.name), function(x){
c( delta10=(exercise(inputs, x$var.name, 1.10 )-b.total)/b.total
)
}
)
df.delta10 <- transform(df.delta10,
var.name = reorder(var.name, delta10))
ggplot(df.delta10, aes(var.name, delta10)) + geom_bar(stat="identity") + coord_flip() + scale_y_continuous(labels=percent, limits=c(-0.05,0.1))
```
# Now examine the change in benefits over a range of different inputs
```{r}
on.peak.rate.alt <- c(50,60,70,80,90,100)
load.shifting.periods.alt <- c(8,9,10,11)
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shifting.periods.alt"=load.shifting.periods.alt)
for(i in 1:length(alt.vars){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shifting.periods','default']  <- alt.vars$load.shifting.periods.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
require(plyr)
require(ggplot2)
source('~/Code/energy_projects/func.r')
inputs <-data.frame(
default=c(
80,20,5,5,10,250,100000,2
)
)
row.names(inputs) <- c(
'on.peak.rate',
'off.peak.rate',
'demand.charge',
'capacity',
'load.shift.duration',
'load.shifting.periods',
'cost.per.volt.sag',
'volt.sag.count'
)
inputs$var.name <- row.names(inputs)
# From http://www.tybecenergy.com/pricehistory/pjm_settle.php
on.peak.rate <- 44.40 # $
off.peak.rate <- 31.13 # $
b.total <- calc.benefits(inputs)
sprintf("$%.f", b.total)
percent(exercise(inputs, 'capacity',1.10) / b.total - 1)
percent(exercise(inputs, 'on.peak.rate',1.10) / b.total - 1)
df.delta10 <- ddply(inputs, .(var.name), function(x){
c( delta10=(exercise(inputs, x$var.name, 1.10 )-b.total)/b.total
)
}
)
df.delta10 <- transform(df.delta10,
var.name = reorder(var.name, delta10))
ggplot(df.delta10, aes(var.name, delta10)) + geom_bar(stat="identity") + coord_flip() + scale_y_continuous(labels=percent, limits=c(-0.05,0.1))
on.peak.rate.alt <- c(50,60,70,80,90,100)
load.shifting.periods.alt <- c(8,9,10,11)
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shifting.periods.alt"=load.shifting.periods.alt)
for(i in 1:length(alt.vars)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shifting.periods','default']  <- alt.vars$load.shifting.periods.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
alt.vars
for(i in 1:length(alt.vars)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shifting.periods','default']  <- alt.vars$load.shifting.periods.alt[i]
print(alt.inputs)
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
for(i in 1:nrow(alt.vars)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shifting.periods','default']  <- alt.vars$load.shifting.periods.alt[i]
print(alt.inputs)
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
for(i in 1:nrow(alt.vars)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shifting.periods','default']  <- alt.vars$load.shifting.periods.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
alt.vars
cast(alt.vars, on.peak.rate.alt~load.shifting.periods.alt)
require(reshape)
cast(alt.vars, on.peak.rate.alt~load.shifting.periods.alt)
alt.inputs
alt.inputs['capacity','default']
alt.inputs <- inputs
alt.inputs['capacity','default'] <- 10
on.peak.rate.alt <- c(50,60,70,80,90,100)
load.shift.duration.alt <- c(8,9,10,11)
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shift.duration.alt"=load.shift.duration.alt)
for(i in 1:nrow(alt.vars)){
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shift.duration','default']  <- alt.vars$load.shift.duration.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
alt.vars
cast(alt.vars, on.peak.rate.alt~load.shift.duration.alt)
inputs
inputs$uncertainty.pct <- c(0.2,0.2,0.2,0.03,0.1,0.1,0.2,.5)
inputs$uncertainty.value <- c(16,4,1,0.15,1,25,20000,1)
inputs$uncertainty.abs <- inputs$default * imputs.uncertainty.pct
inputs
options(scipen=5)
inputs$uncertainty.pct <- c(0.2,0.2,0.2,0.03,0.1,0.1,0.2,.5)
inputs$uncertainty.value <- c(16,4,1,0.15,1,25,20000,1)
inputs$uncertainty.abs <- inputs$default * imputs.uncertainty.pct
inputs
inputs$uncertainty.abs <- inputs$default * inputs.uncertainty.pct
inputs
inputs$uncertainty.pct <- c(0.2,0.2,0.2,0.03,0.1,0.1,0.2,.5)
inputs$uncertainty.value <- c(16,4,1,0.15,1,25,20000,1)
inputs$uncertainty.abs <- inputs$default * inputs.uncertainty.pct
inputs
inputs$uncertainty.pct <- c(0.2,0.2,0.2,0.03,0.1,0.1,0.2,.5)
inputs$uncertainty.value <- c(16,4,1,0.15,1,25,20000,1)
inputs$uncertainty.abs <- inputs$default * inputs$uncertainty.pct
inputs
inputs$low <- inputs.default - inputs$uncertainty.abs
inputs$low <- inputs$default - inputs$uncertainty.abs
inputs$high <- inputs$default + inputs$uncertainty.abs
inputs
setwd("~/Code/energy_projects")
setwd("~/Code/MSHA")
setwd("~/Code/MSHA")
head(events)
require(reshape)
require(plyr)
require(ggplot2)
require(lubridate)
require(xtable)
require(scales)
setwd('~/Code/MSHA/')
source('./lib/calendarHeat.r')
mdat <- read.table('./data/msha_source/Mines.TXT', header=T, sep="|", fill=T, as.is=c(1:59),quote="\"")
t(head(mdat,3))
mdat_wv <- subset(mdat, STATE == 'WV' & COAL_METAL_IND == 'C')
idat <- read.csv("./data/wv_idat.csv")
idat <- merge(idat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])
t(head(idat,3))
adat <- read.table('./data/msha_source/Accidents.TXT', header=T, sep="|", fill=T, quote="\"",comment.char = "")
# WV is FIPS 54
adat <- subset(adat, FIPS_STATE_CD==54)
adat <- merge(adat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])
adat$accident.key <- seq(1:nrow(adat))
t(head(adat,3))
vdat <- read.csv("./data/wv_vdat.csv")
vdat <- merge(vdat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])
t(head(vdat,3))
mdat_wv <- mdat_wv[grep('Abandoned.*',mdat_wv$CURRENT_MINE_STATUS, invert=TRUE),]
nrow(mdat_wv)
idat <- subset(idat, MINE_ID %in% mdat_wv$MINE_ID)
vdat <- subset(vdat, MINE_ID %in% mdat_wv$MINE_ID)
nrow(idat)
nrow(vdat)
mdat_wv$current.status.dt <- mdy(mdat_wv$CURRENT_STATUS_DT)
idat$inspection.begin.dt <- mdy(idat$INSPECTION_BEGIN_DT)
vdat$violation.occur.dt <- mdy(vdat$VIOLATION_OCCUR_DT)
adat$accident.dt <- mdy(adat$ACCIDENT_DT)
names(adat)
names(idat)
names(vdat)
names(mdat)
vxday <- ddply(vdat, .(violation.occur.dt), nrow)
names(vxday) <- c('date','vcount')
calendarHeat(subset(vxday, year(date)==2011)$date , subset(vxday, year(date)==2011)$vcount)
events <-
rbind(
data.frame(event='inspection', MINE_ID = idat$MINE_ID, event.day=idat$inspection.begin.dt, event.key=idat$EVENT_NO)
,
data.frame(event='violation', MINE_ID = vdat$MINE_ID, event.day=vdat$violation.occur.dt,event.key=vdat$EVENT_NO)
,
data.frame(event='accident', MINE_ID = adat$MINE_ID, event.day=adat$accident.dt, event.key=adat$accident.key)
)
edays<-cast(events, event.day+MINE_ID~event, value='event.key', fun.aggregate='min')
eventsRR <- subset(edays, MINE_ID == 4601318)
eventsRR$day.decimal <- decimal_date(eventsRR$event.day)
eventsRR$lastinsp <- ifelse(eventsRR$inspection > 0 & eventsRR$inspection < Inf, eventsRR$day.decimal , cummax(ifelse(eventsRR$inspection > 0 & eventsRR$inspection < Inf, eventsRR$day.decimal, 0)))
eventsRR$lastviol <- ifelse(eventsRR$violation > 0 & eventsRR$violation < Inf, eventsRR$day.decimal , cummax(ifelse(eventsRR$violation > 0 & eventsRR$violation < Inf, eventsRR$day.decimal, 0)))
eventsRR$lastacc <- ifelse(eventsRR$accident > 0 & eventsRR$accident < Inf, eventsRR$day.decimal , cummax(ifelse(eventsRR$accident > 0 & eventsRR$accident < Inf, eventsRR$day.decimal, 0)))
eventsRR$sinceinsp <- eventsRR$day.decimal - eventsRR$lastinsp
eventsRR$sinceviol <- eventsRR$day.decimal - eventsRR$lastviol
eventsRR$sinceacc <- eventsRR$day.decimal - eventsRR$lastacc
eventsRR$year <- floor(eventsRR$day.decimal)
ggplot(subset(eventsRR, year> 2000)) +
geom_line(aes(x=day.decimal - year, y=sinceinsp),color='blue') +
#  geom_line(aes(x=day.decimal - year, y=sinceviol),color='black') +
geom_line(aes(x=day.decimal - year, y=sinceacc),color='red') +
facet_wrap('year')
