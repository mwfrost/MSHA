mc.benefits(inputs, 10)
mc.benefits <- function(dat, iterations){
mc.results <- c()
dat <- dat[,c('default','var.name','sd')]
dat$iteration <- 0
dat.full <- dat
for(i in 1:iterations) {
mc.dat <-  ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
mc.dat$iteration <- i
mc.dat$default <- mc.dat$mcval
mc.dat$mcval <- NULL
str(mc.dat)
dat.full <- rbind(dat.full, mc.dat)
str(dat.full)
mc.results[i] <- calc.benefits(subset(dat.full, iteration=i) )
}
mc.results
}
mc.benefits(inputs, 10)
mc.benefits <- function(dat, iterations){
mc.results <- c()
dat <- dat[,c('default','var.name','sd')]
dat$iteration <- 0
dat.full <- dat
for(i in 1:iterations) {
mc.dat <-  ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
mc.dat$iteration <- i
mc.dat$default <- mc.dat$mcval
mc.dat$mcval <- NULL
str(mc.dat)
dat.full <- rbind(dat.full, mc.dat)
mc.results[i] <- calc.benefits(subset(dat.full, iteration==i) )
}
mc.results
}
mc.benefits(inputs, 10)
mc.benefits <- function(dat, iterations){
mc.results <- c()
dat <- dat[,c('default','var.name','sd')]
dat$iteration <- 0
dat.full <- dat
for(i in 1:iterations) {
mc.dat <-  ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
mc.dat$iteration <- i
mc.dat$default <- mc.dat$mcval
mc.dat$mcval <- NULL
str(mc.dat)
mc.results[i] <- calc.benefits(mc.dat)
}
mc.results
}
mc.benefits(inputs, 10)
mc.benefits <- function(dat, iterations){
mc.results <- c()
dat <- dat[,c('default','var.name','sd')]
dat$iteration <- 0
dat.full <- dat
for(i in 1:iterations) {
mc.dat <-  ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
mc.dat$iteration <- i
mc.dat$default <- mc.dat$mcval
mc.dat$mcval <- NULL
str(mc.dat)
mc.results[i] <- calc.benefits(mc.dat)
}
mc.results
}
mc.benefits(inputs, 10)
mc.benefits <- function(dat, iterations){
mc.results <- c()
dat <- dat[,c('default','var.name','sd')]
dat$iteration <- 0
dat.full <- dat
for(i in 1:iterations) {
mc.dat <-  ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
mc.dat$iteration <- i
mc.dat$default <- mc.dat$mcval
mc.dat$mcval <- NULL
str(mc.dat)
mc.results[i] <- calc.benefits(mc.dat)
}
mc.results
}
mc.benefits(inputs, 10)
mc.benefits <- function(dat, iterations){
mc.results <- c()
dat <- dat[,c('default','var.name','sd')]
dat$iteration <- 0
dat.full <- dat
for(i in 1:iterations) {
mc.dat <-  ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
mc.dat$iteration <- i
mc.dat$default <- mc.dat$mcval
mc.dat$mcval <- NULL
str(mc.dat)
calc.benefits(mc.dat)
mc.results[i] <- calc.benefits(mc.dat)
}
mc.results
}
mc.benefits(inputs, 10)
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 10)
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 10)
source('~/Code/energy_projects/func.r')
calc.benefits(inputs)
mc.benefits(inputs, 10)
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 10)
source('~/Code/energy_projects/func.r')
source('~/Code/energy_projects/func.r')
c <- 'default'
b.energy <- (input.df['on.peak.rate',c]
c <- 'default'
b.energy <- (input.df['on.peak.rate',c]
c <- 'default'
c <- 'default'
b.energy <- (input.df['on.peak.rate',c])
c <- 'default'
rstudio::viewData(inputs.b)
rstudio::viewData(inputs)
rstudio::viewData(inputs.b)
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 10)
source('~/Code/energy_projects/func.r')
source('~/.active-rstudio-document', echo=TRUE)
varied
varied$contribution.pct <- percentify(varied$contribution)
source('~/.active-rstudio-document', echo=TRUE)
#  References:
# http://www.r-bloggers.com/mlb-baseball-pitching-matchups-downloading-pitch-fx-data-using-the-xml-package-in-r%C2%A0updatedx6/
# http://blogisticreflections.wordpress.com/2009/10/04/using-r-to-analyze-baseball-games-in-real-time/
# http://gd2.mlb.com/components/game/mlb/year_2010/month_10/day_12/miniscoreboard.xml
## create a boxscore object from an XML description of a game
createBoxScore <- function(x) {
status <- if(x$.attrs["status"] != "In Progress")
"Final" else if(x$.attrs["top_inning"] == "Y")
"Top" else "Bot"
bs <- list(status = status,
inning = as.numeric(x$.attrs["inning"]),
away.team = x$.attrs["away_name_abbrev"],
away.runs = as.numeric(x$.attrs["away_team_runs"]),
away.hits = as.numeric(x$.attrs["away_team_hits"]),
away.errors = as.numeric(x$.attrs["away_team_errors"]),
home.team = x$.attrs["home_name_abbrev"],
home.runs = as.numeric(x$.attrs["home_team_runs"]),
home.hits = as.numeric(x$.attrs["home_team_hits"]),
home.errors = as.numeric(x$.attrs["home_team_errors"]))
class(bs) <- "boxscore"
bs
}
## print the boxscore object in traditional format
print.boxscore <- function(x, ...) {
cat("     ", "R   ", "H  ", "E (",
x$status, " ",
x$inning, ")\n",
format(x$away.team, width = 3), " ",
format(x$away.runs, width = 2), "  ",
format(x$away.hits, width = 2), "  ",
x$away.errors, "\n",
format(x$home.team, width = 3), " ",
format(x$home.runs, width = 2), "  ",
format(x$home.hits, width = 2), "  ",
x$home.errors, "\n", '\n'
, sep = ""
)
}
## utility function ...
as.data.frame.boxscore <- function(x, row.names, optional, ...) {
class(x) <- "list"
as.data.frame(x)
}
## This is the "user accessible" public function you should be calling!
## downloads the XML data, and prints out boxscores for games on "date"
boxscore <- function(date = Sys.Date()) {
if(date > Sys.Date())
stop("Cannot retrieve scores from the future.")
year  <- paste("year_", format(date, "%Y"), "/", sep = "")
month <- paste("month_", format(date, "%m"), "/", sep = "")
day   <- paste("day_", format(date, "%d"), "/", sep = "")
xmlFile <-
paste("http://gd2.mlb.com/components/game/mlb/",
year, month, day, "miniscoreboard.xml", sep = "")
#cat(xmlFile)
xmlTree <- xmlTreeParse(xmlFile, useInternalNodes = TRUE)
xp <- xpathApply(xmlTree, "//game")
xmlList <- lapply(xp, xmlToList)
bs.list <- lapply(xmlList, createBoxScore)
names(bs.list) <-
paste(sapply(bs.list, "[[", "away.team"),
"@",
sapply(bs.list, "[[", "home.team"))
bs.list
}
fetch.pinboard.tag <- function(tag = 'xxx') {
if( tag == 'xxx')
stop('No tag provided.')
pb.url <- (paste('http://api.pinboard.in/v1/posts/all?auth_token=michael_brendan_dougherty:45502A65EA7E918288B0&tag=new',tag,sep=','))
# cat(pb.url)
xmlTree <- xmlTreeParse(pb.url, useInternalNodes = TRUE)
pb.xml <- xpathApply(xmlTree, '//post')
xmlList <- lapply(pb.xml, xmlToList)
pb.vec <- sapply(xmlList, parse.pinboard)
pb.out <- paste(pb.vec,collapse="&nbsp;&bull;&nbsp;")
pb.out
}
parse.pinboard <- function(pb = ''){
paste(pb['extended'],'~[', pb['description'], '](', pb['href'],')', sep='')
}
score.links <-  function(x){
cat(
print.boxscore(x),
'Stories about ', x$away.team, ':',
'\n',
fetch.pinboard.tag(x$away.team),
'\n',
'Stories about ', x$home.team, ':',
'\n',
fetch.pinboard.tag(x$home.team),
'\n',
sep=''
)
}
fetch.pinboard.tag('CWS')
source('~/Dropbox/R_baseball/baseball_functions.r', echo=TRUE)
fetch.pinboard.tag('CWS')
fetch.pinboard.tag('CWS')
library(XML)
fetch.pinboard.tag('CWS')
source('~/Dropbox/R_baseball/baseball_functions.r', echo=TRUE)
require(plyr)
require(ggplot2)
require(reshape)
require(FME)
require(xtable)
source('~/Code/energy_projects/func.r')
options(scipen=5)
percentify <- function(x, r=1, keep.zeros=FALSE){
ifelse (as.numeric(x) != 0 | keep.zeros==TRUE,  paste( format(round ( as.numeric(x) * 100, r) , nsmall=r) , '%', sep='')
,
'')
}
calc.sensitivity <- function(dat, var, delta) {
var.a <- dat[var,'default']
result.a <- calc.benefits(dat)
dat[var,'default'] <- dat[var,'default'] * delta
var.b <- dat[var,'default']
result.b <- calc.benefits(dat)
((result.b - result.a) / result.a) / ((var.b - var.a) / var.a)
(result.b - result.a) / (var.b - var.a)
}
inputs <-data.frame(
default=c(
80,20,5,5,10,250,100000,2
)
)
row.names(inputs) <- c(
'on.peak.rate',
'off.peak.rate',
'demand.charge',
'capacity',
'load.shift.duration',
'load.shifting.periods',
'cost.per.volt.sag',
'volt.sag.count'
)
inputs$var.name <- row.names(inputs)
# From http://www.tybecenergy.com/pricehistory/pjm_settle.php
on.peak.rate <- 44.40 # $
off.peak.rate <- 31.13 # $
b.total <- calc.benefits(inputs)
sprintf("$%.f", b.total)
percent(exercise(inputs, 'capacity',1.10) / b.total - 1)
percent(exercise(inputs, 'on.peak.rate',1.10) / b.total - 1)
df.delta10 <- ddply(inputs, .(var.name), function(x){
c( delta10=(exercise(inputs, x$var.name, 1.10 )-b.total)/b.total
)
}
)
df.delta10 <- transform(df.delta10,
var.name = reorder(var.name, delta10))
ggplot(df.delta10, aes(var.name, delta10)) + geom_bar(stat="identity") + coord_flip() + scale_y_continuous(labels=percent, limits=c(-0.05,0.1))
on.peak.rate.alt <- c(50,60,70,80,90,100)
load.shift.duration.alt <- c(8,9,10,11)
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shift.duration.alt"=load.shift.duration.alt)
for(i in 1:nrow(alt.vars)){
alt.inputs <- inputs
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shift.duration','default']  <- alt.vars$load.shift.duration.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
alt.vars
cast(alt.vars, on.peak.rate.alt~load.shift.duration.alt)
alt.inputs <- inputs
alt.inputs['capacity','default'] <- 10
on.peak.rate.alt <- c(50,60,70,80,90,100)
load.shift.duration.alt <- c(8,9,10,11)
alt.vars <- expand.grid("on.peak.rate.alt"=on.peak.rate.alt, "load.shift.duration.alt"=load.shift.duration.alt)
for(i in 1:nrow(alt.vars)){
alt.inputs['on.peak.rate','default']  <- alt.vars$on.peak.rate.alt[i]
alt.inputs['load.shift.duration','default']  <- alt.vars$load.shift.duration.alt[i]
alt.vars$benefit[i] <- calc.benefits(alt.inputs)
}
alt.vars
cast(alt.vars, on.peak.rate.alt~load.shift.duration.alt)
print(xtable(inputs), type='html')
inputs$uncertainty.pct <- c(0.2,0.2,0.2,0.03,0.1,0.1,0.2,.5)
inputs$uncertainty.abs <- inputs$default * inputs$uncertainty.pct
inputs$low <- inputs$default - inputs$uncertainty.abs
inputs$high <- inputs$default + inputs$uncertainty.abs
print(xtable(inputs), type='html')
alt.inputs <- inputs[,c('default','var.name','uncertainty.abs')]
varied <- ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity(alt.inputs, x$var.name, 1.01) ))
varied$km <- (varied$uncertainty.abs * varied$sensitivity)^2
varied
varied <- ddply(varied, .(),  transform, contribution=km/sum(km) )
varied$contribution.pct <- percentify(varied$contribution)
print(xtable(varied), type='html')
cat('Total Uncertainty: ' , sprintf("$%.0f", sum(varied$km)^.5) )
ggplot(varied, aes(var.name, contribution)) + geom_bar(stat="identity") + coord_flip() + scale_y_continuous(labels=percent, limits=c(-0.05,1))
inputs.b <- inputs
inputs.b['on.peak.rate','uncertainty.pct'] <- 0.1
inputs.b$uncertainty.abs <- inputs.b$default * inputs.b$uncertainty.pct
varied.b <- ddply(inputs.b, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity(inputs.b, x$var.name, 1.01) ))
varied.b$km <- (varied.b$uncertainty.abs * varied.b$sensitivity)^2
varied.b <- ddply(varied.b, .(),  transform, contribution=km/sum(km) )
varied.b$contribution.pct <- percentify(varied.b$contribution)
print(xtable(varied.b), type='html')
cat('Total Uncertainty: ' , sprintf("$%.0f", sum(varied.b$km)^.5) )
inputs$sd <- (inputs$default * inputs$uncertainty.pct)/2
x=seq(56,104,length=200)
y=dnorm(x,mean=80,sd=8)
plot(x,y,type="l",lwd=2,col="red")
x=seq(4.775,5.225,length=200)
y=dnorm(x,mean=5,sd=0.075)
plot(x,y,type="l",lwd=2,col="red")
print(xtable(inputs[,c('var.name','default','uncertainty.abs')] ), type='html')
mc.benefits(inputs, 10)
mc.benefits(inputs, 10)[1]
inputs
calc.benefits(inputs)
mc.benefits(inputs)
mc.benefits(inputs, 2)
str(calc.benefits(inputs))
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 2)
inputs
calc.benefits(inputs)
dat <- inputs[,c('default','var.name','sd')]
dat
ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
?rnorm
ddply(dat, .(var.name, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
ddply(dat, .(var.name, default, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
rnorm(10, 250, 12.5)
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 2)
calc.benefits(inputs)
inputs
mc.dat <-  ddply(inputs, .(var.name, default, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
mc.dat
calc.benefits(mc.dat)
calc.benefits(inputs)
inputs
calc.benefits(mc.dat)
source('~/Code/energy_projects/func.r')
mc.dat <-  ddply(inputs, .(var.name, default, sd) , function(x) c(mcval=rnorm(1 , x$default, x$sd )))
source('~/Code/energy_projects/func.r')
calc.benefits(mc.dat)
mc.data
mc.dat
row.names(mc.dat) <- mc.dat$var.name
mc.dat
calc.benefits(mc.dat)
mc.benefits(mc.dat)
mc.benefits(mc.dat, 2)
mc.benefits(mc.dat, 1)
source('~/Code/energy_projects/func.r')
mc.benefits(inputs, 1)
mc.benefits(inputs, 10)
mc.benefits(inputs, 100)
hist(mc.benefits(inputs, 100)
)
mc.results <- mc.benefits(inputs, 5000)
hist(mc.results)
summarize(mc.results)
summary(mc.results)
std(mc.results)
sd(mc.results)
?hist
hist(mc.results, freq=TRUE)
hist(mc.results, freq=FALSE)
?hist
hist(mc.results, freq=FALSE, breaks=100)
hist(mc.results, freq=FALSE, breaks=200)
hist(mc.results, freq=FALSE, breaks=50)
t.test(mc.results, conf.level=0.99)
?t.test
t.test(mc.results, conf.level=0.95)
summary(mc.results)
hist(mc.results, freq=FALSE, breaks=50)
describe(mc.results)
install.packages('pastecs')
require(pastecs)
stat.desc(mc.results)
t(stat.desc(mc.results))
data.frame(stat.desc(mc.results))
str(data.frame(stat.desc(mc.results)))
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
fetch.pinboard.tag('BOS')
library(XML)
source('~/Dropbox/R_baseball/baseball_functions_test.r')
fetch.pinboard.tag('BOS')
fetch.pinboard.tag('BAL')
fetch.pinboard.tag('HOU')
fetch.pinboard.tag('NYY')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
fetch.pinboard.tag('CWS')
fetch.pinboard.tag('TEX')
fetch.pinboard.tag('TOR')
fetch.pinboard.tag('PHI')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/Dropbox/R_baseball/baseball_functions_test.r')
source('~/.active-rstudio-document', echo=TRUE)
stat.desc(mc.results)
stat.desc(mc.results)$std.dev
stat.desc(mc.results)['std.dev']
stat.desc(mc.results)['std.dev'] * 2
?format
format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2)
format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
paste(
'$', format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
)
cat(
'$', format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
)
cat(
'$', format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
sep='')
cat(
'$', format(stat.desc(mc.results)['std.dev'] * 2 , nsmall = 2, big.mark=',')
,sep='')
calc.sensitivity
inputs
source('~/Code/energy_projects/func.r')
source('~/Code/energy_projects/func.r')
varied.mc <- ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01, 5000) ))
calc.sensitivity.mc(alt.inputs, x$var.name, 1.01, 5000)
alt.inputs
calc.sensitivity(alt.inputs, x$var.name, 1.01)
alt.inputs <- inputs[,c('default','var.name','uncertainty.abs')]
varied <- ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity(alt.inputs, x$var.name, 1.01) ))
varied$km <- (varied$uncertainty.abs * varied$sensitivity)^2
varied
varied <- ddply(varied, .(),  transform, contribution=km/sum(km) )
varied$contribution.pct <- percentify(varied$contribution)
alt.inputs
inputs
ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01) ))
ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01) ))
ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01),5000 ))
uncertainty.abs
sensitivity=calc.sensitivity.mc(alt.inputs, capacity, 1.01),5000 )
sensitivity=calc.sensitivity.mc(alt.inputs, capacity, 1.01)
sensitivity=calc.sensitivity.mc(alt.inputs, 'capacity', 1.01, 100)
calc.sensitivity.mc(dat=alt.inputs, var='capacity', 1.01, 100)
inputs
alt.inputs
alt.inputs['capacity','default']
calc.sensitivity.mc(dat=alt.inputs, var='capacity', 1.01, 100)
calc.sensitivity.mc(dat=inputs, var='capacity', 1.01, 100)
source('~/Code/energy_projects/func.r')
calc.sensitivity.mc(dat=inputs, var='capacity', 1.01, 100)
source('~/Code/energy_projects/func.r')
source('~/Code/energy_projects/func.r')
calc.sensitivity.mc(dat=inputs, var='capacity', 1.01, 100)
varied.mc <- ddply(alt.inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01, 5000) ))
varied.mc <- ddply(inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(alt.inputs, x$var.name, 1.01, 5000) ))
varied.mc <- ddply(inputs, .(var.name, uncertainty.abs), function(x) c(value=x$default, sensitivity=calc.sensitivity.mc(inputs, x$var.name, 1.01, 5000) ))
varied.mc
varied.mc <- ddply(varied.mc, .(),  transform, contribution=km/sum(km) )
varied.mc$km <- (varied.mc$uncertainty.abs * varied.mc$sensitivity)^2
varied.mc
varied.mc <- ddply(varied.mc, .(),  transform, contribution=km/sum(km) )
varied.mc$contribution.pct <- percentify(varied.mc$contribution)
varied.mc
varied.mc[,c('var.name','contribution.pct')]
head(trailing.events(mine.days[1:10,'MINE_ID'], mine.days[1:10, 'mine.day'], 30))
source('~/.active-rstudio-document', echo=TRUE)
head(mine.day.stats)
ggplot(mine.day.stats[mine.day.stats$MINE_ID == 4601318]) + geom_line(aes(x=acc.dt,y=trailing.violations))
ggplot(mine.day.stats[mine.day.stats$MINE_ID == 4601318,]) + geom_line(aes(x=acc.dt,y=trailing.violations))
mine.day.stats[mine.day.stats$MINE_ID == 4601318,]
ggplot(mine.day.stats[mine.day.stats$mine == 4601318,]) + geom_line(aes(x=acc.dt,y=trailing.violations))
ggplot(mine.day.stats[mine.day.stats$mine == 4601318,]) + geom_line(aes(x=acc.dt,y=trailing.violations))
ggplot(mine.day.stats[mine.day.stats$mine == 4601318,]) + geom_line(aes(x=acc.dt,y=trailing.accidents))
ggplot(mine.day.stats[mine.day.stats$mine == 4601318,]) + geom_line(aes(x=acc.dt,y=trailing.violations)) + geom_line(aes(x=acc.dt,y=trailing.accidents),color='red')
ggplot(mine.day.stats[mine.day.stats$mine == 4601318,]) +
geom_line(aes(x=acc.dt,y=trailing.violations)) +
geom_line(aes(x=acc.dt,y=trailing.accidents),color='red') +
geom_line(aes(x=acc.dt,y=trailing.inspections),color='blue')
ggplot(mine.day.stats[mine.day.stats$mine == 4601318,]) +
geom_point(aes(x=trailing.accidents,y=trailing.violations))
ggplot(mine.day.stats) +
geom_point(aes(x=trailing.accidents,y=trailing.violations))
