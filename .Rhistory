bs.list#
}
boxscore()
Sys.Date()
boxscore(date = "2011-10-23")
boxscore( "2011-10-23")
boxscore( "2011/10/23")
boxscore( date="2011/10/23")
boxscore( as.POSIXCT"2011/10/23"))
boxscore( as.POSIXCT()"2011/10/23"))
boxscore( as.POSIXCT("2011/10/23"))
boxscore( as.POSIXct("2011/10/23"))
boxscore("2011/10/23")
boxscore(Sys.Date())
boxscore(Sys.Date()-1)
gamexml <- function(date = Sys.Date()-1) {#
if(date > Sys.Date())#
stop("Cannot retrieve scores from the future.")#
#
year  <- paste("year_", format(date, "%Y"), "/", sep = "")#
month <- paste("month_", format(date, "%m"), "/", sep = "")#
day   <- paste("day_", format(date, "%d"), "/", sep = "")#
#
xmlFile <-#
paste("http://gd2.mlb.com/components/game/mlb/",#
year, month, day, "miniscoreboard.xml", sep = "")#
xmlTree <- xmlTreeParse(xmlFile, useInternalNodes = TRUE)#
xp <- xpathApply(xmlTree, "//game")#
xp#
}
gamexml
gamexml()
boxscore <- function(date = Sys.Date()) {#
if(date > Sys.Date())#
stop("Cannot retrieve scores from the future.")#
#
year  <- paste("year_", format(date, "%Y"), "/", sep = "")#
month <- paste("month_", format(date, "%m"), "/", sep = "")#
day   <- paste("day_", format(date, "%d"), "/", sep = "")#
#
xmlFile <-#
paste("http://gd2.mlb.com/components/game/mlb/",#
year, month, day, "miniscoreboard.xml", sep = "")#
xmlTree <- xmlTreeParse(xmlFile, useInternalNodes = TRUE)#
xp <- xpathApply(xmlTree, "//game")#
xmlList <- lapply(xp, xmlToList)#
#
bs.list <- lapply(xmlList, createBoxScore)#
names(bs.list) <-#
paste(sapply(bs.list, "[[", "away.team"),#
"@",#
sapply(bs.list, "[[", "home.team"))#
bs.list#
}#
#
gamexml <- function(date = Sys.Date()) {#
if(date > Sys.Date())#
stop("Cannot retrieve scores from the future.")#
#
year  <- paste("year_", format(date, "%Y"), "/", sep = "")#
month <- paste("month_", format(date, "%m"), "/", sep = "")#
day   <- paste("day_", format(date, "%d"), "/", sep = "")#
#
xmlFile <-#
paste("http://gd2.mlb.com/components/game/mlb/",#
year, month, day, "miniscoreboard.xml", sep = "")#
xmlTree <- xmlTreeParse(xmlFile, useInternalNodes = TRUE)#
xp <- xpathApply(xmlTree, "//game")#
xp#
}#
#
#
#
#
#
bs <- boxscore(date = Sys.Date()-1)
bs
bs.df <- do.call(rbind, lapply(bs, as.data.frame))
#
bs.df$updated <-  Sys.time() #
write.table(bs.df,file="~/Dropbox/Public/boxscore.csv",sep=",",na="",row.names=FALSE)#
write.table(bs.df,file="~/Dropbox/Public/boxscore.txt",sep="\t",na="",row.names=FALSE)
gamexml
gamexml()
gamexml(Sys.Date()-1)
bs.df <- do.call(rbind, lapply(bs, as.data.frame))
bs.df
library(XML)#
#
## create a boxscore object from an XML description of a game#
createBoxScore <- function(x) {#
status <- if(x$.attrs["status"] != "In Progress")#
"Final" else if(x$.attrs["top_inning"] == "Y")#
"Top" else "Bot"#
#
bs <- list(status = status,#
inning = as.numeric(x$.attrs["inning"]),#
away.team = x$.attrs["away_name_abbrev"],#
away.runs = as.numeric(x$.attrs["away_team_runs"]),#
away.hits = as.numeric(x$.attrs["away_team_hits"]),#
away.errors = as.numeric(x$.attrs["away_team_errors"]),#
home.team = x$.attrs["home_name_abbrev"],#
home.runs = as.numeric(x$.attrs["home_team_runs"]),#
home.hits = as.numeric(x$.attrs["home_team_hits"]),#
home.errors = as.numeric(x$.attrs["home_team_errors"]))#
class(bs) <- "boxscore"#
bs#
}#
#
## print the boxscore object in traditional format#
print.boxscore <- function(x, ...) {#
cat("     ", "R   ", "H  ", "E (",#
x$status, " ",#
x$inning, ")\n",#
format(x$away.team, width = 3), " ",#
format(x$away.runs, width = 2), "  ",#
format(x$away.hits, width = 2), "  ",#
x$away.errors, "\n",#
format(x$home.team, width = 3), " ",#
format(x$home.runs, width = 2), "  ",#
format(x$home.hits, width = 2), "  ",#
x$home.errors, "\n\n", sep = "")#
}#
#
## utility function ...#
as.data.frame.boxscore <- function(x, row.names, optional, ...) {#
class(x) <- "list"#
as.data.frame(x)#
}#
#
## This is the "user accessible" public function you should be calling!#
## downloads the XML data, and prints out boxscores for games on "date"#
boxscore <- function(date = Sys.Date()) {#
if(date > Sys.Date())#
stop("Cannot retrieve scores from the future.")#
#
year  <- paste("year_", format(date, "%Y"), "/", sep = "")#
month <- paste("month_", format(date, "%m"), "/", sep = "")#
day   <- paste("day_", format(date, "%d"), "/", sep = "")#
#
xmlFile <-#
paste("http://gd2.mlb.com/components/game/mlb/",#
year, month, day, "miniscoreboard.xml", sep = "")#
xmlTree <- xmlTreeParse(xmlFile, useInternalNodes = TRUE)#
xp <- xpathApply(xmlTree, "//game")#
xmlList <- lapply(xp, xmlToList)#
#
bs.list <- lapply(xmlList, createBoxScore)#
names(bs.list) <-#
paste(sapply(bs.list, "[[", "away.team"),#
"@",#
sapply(bs.list, "[[", "home.team"))#
bs.list#
}#
#
gamexml <- function(date = Sys.Date()) {#
if(date > Sys.Date())#
stop("Cannot retrieve scores from the future.")#
#
year  <- paste("year_", format(date, "%Y"), "/", sep = "")#
month <- paste("month_", format(date, "%m"), "/", sep = "")#
day   <- paste("day_", format(date, "%d"), "/", sep = "")#
#
xmlFile <-#
paste("http://gd2.mlb.com/components/game/mlb/",#
year, month, day, "miniscoreboard.xml", sep = "")#
xmlTree <- xmlTreeParse(xmlFile, useInternalNodes = TRUE)#
xp <- xpathApply(xmlTree, "//game")#
xp#
}#
#
#
#
#
#
bs <- boxscore(date = Sys.Date()-1)#
#
bs.df <- do.call(rbind, lapply(bs, as.data.frame))#
#
bs.df$updated <-  Sys.time() #
write.table(bs.df,file="~/Dropbox/Public/boxscore.csv",sep=",",na="",row.names=FALSE)#
write.table(bs.df,file="~/Dropbox/Public/boxscore.txt",sep="\t",na="",row.names=FALSE)
bs.df
#
#
data(baseball)#
#
#To do this for all players, we first make a function:#
calculate_cyear <- function(df) { #
within(df, {#
cyear <- year - min(year) + 1 #
cpercent <- cyear / max(cyear)#
})#
}#
#
baseball <- ddply(baseball, .(id), calculate_cyear)#
#baseball <- subset(baseball, ab >= 25)#
#
bbsub <- subset(baseball, id %in% c('aaronha01','ruthba01','mcgwima01', 'bondsba01'))#
# Example search: baseball[grep('bond', baseball$id),]#
#
xlim <- range(bbsub$cyear, na.rm=TRUE) #
ylim <- range(bbsub$hr/ bbsub$ab, na.rm=TRUE) #
#
plotpattern <- function(df) {#
qplot(cyear, hr / ab, data = df, geom="line", xlim = xlim, ylim = ylim)#
}#
pdf("paths.pdf", width=8, height=4) #
d_ply(bbsub, .(reorder(id, hr / ab)), failwith(NA, plotpattern),#
.print = TRUE) #
dev.off()#
#
ggplot(bbsub, aes(x=cyear,y=hr)) + geom_line() + facet_grid( id ~. ) + geom_text(aes(label=year))#
#
ggplot(bbsub, aes(x=cyear,y=hr,color=id)) + geom_line()  + geom_text(aes(label=year))
library(ggplot2)
#
#
data(baseball)#
#
#To do this for all players, we first make a function:#
calculate_cyear <- function(df) { #
within(df, {#
cyear <- year - min(year) + 1 #
cpercent <- cyear / max(cyear)#
})#
}#
#
baseball <- ddply(baseball, .(id), calculate_cyear)#
#baseball <- subset(baseball, ab >= 25)#
#
bbsub <- subset(baseball, id %in% c('aaronha01','ruthba01','mcgwima01', 'bondsba01'))#
# Example search: baseball[grep('bond', baseball$id),]#
#
xlim <- range(bbsub$cyear, na.rm=TRUE) #
ylim <- range(bbsub$hr/ bbsub$ab, na.rm=TRUE) #
#
plotpattern <- function(df) {#
qplot(cyear, hr / ab, data = df, geom="line", xlim = xlim, ylim = ylim)#
}#
pdf("paths.pdf", width=8, height=4) #
d_ply(bbsub, .(reorder(id, hr / ab)), failwith(NA, plotpattern),#
.print = TRUE) #
dev.off()#
#
ggplot(bbsub, aes(x=cyear,y=hr)) + geom_line() + facet_grid( id ~. ) + geom_text(aes(label=year))#
#
ggplot(bbsub, aes(x=cyear,y=hr,color=id)) + geom_line()  + geom_text(aes(label=year))
install.packages('ProjectTemplate')
demo()
require(plyr)#
require(zoo)#
#
# Mines#
mdat <- read.table('./data/msha_source/Mines.TXT', header=T, sep="|", fill=T, as.is=c(1:59),quote="")#
mdat_wv <- subset(mdat, STATE == 'WV' & COAL_METAL_IND == 'C')#
#
# Inspections#
idat <- read.csv("./data/wv_idat.csv")#
idat <- merge(idat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])#
#
# Accidents#
adat <- read.table('./data/msha_source/Accidents.TXT', header=T, sep="|", fill=T, quote="",comment.char = "")#
# WV is FIPS 54#
adat <- subset(adat, FIPS_STATE_CD==54)#
adat <- merge(adat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])#
#
#
# Violations#
vdat <- read.csv("./data/wv_vdat.csv")#
vdat <- merge(vdat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])
setwd(".~/Code/MSHA")
setwd("~/Code/MSHA")
project.load()
load.project()
library(ProjectTemplate)
load.project()
#
# Mines#
mdat <- read.table('./data/msha_source/Mines.TXT', header=T, sep="|", fill=T, as.is=c(1:59),quote="")#
mdat_wv <- subset(mdat, STATE == 'WV' & COAL_METAL_IND == 'C')#
#
# Inspections#
idat <- read.csv("./data/wv_idat.csv")#
idat <- merge(idat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])#
#
# Accidents#
adat <- read.table('./data/msha_source/Accidents.TXT', header=T, sep="|", fill=T, quote="",comment.char = "")#
# WV is FIPS 54#
adat <- subset(adat, FIPS_STATE_CD==54)#
adat <- merge(adat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])#
#
#
# Violations#
vdat <- read.csv("./data/wv_vdat.csv")#
vdat <- merge(vdat, mdat_wv[,c('MINE_ID','CURRENT_MINE_NAME','CURRENT_CONTROLLER_NAME')])#
#
#
#  mine and operator violation counts#
#
ddply(head(vdat,500), c('VIOLATOR_NAME','MINE_NAME'),summarise, n_violator=length(VIOLATOR_NAME), n_mine=length(MINE_NAME))#
ddply(head(vdat,500), "VIOLATOR_NAME", transform, n_violator = length(VIOLATOR_NAME))#
#
# Calculate simple annual totals by operator#
v_op_yr <-cast(vdat, VIOLATOR_NAME~CAL_YR, value='VIOLATION_NO', length)#
i_op_yr <-cast(idat, OPERATOR_NAME~CAL_YR, length)#
a_op_yr <-cast(adat, OPERATOR_NAME~CAL_YR, length)#
#
# For each mine and calendar year quarter, calculate the number of violations in the trailing n years#
vdat$YR_QTR <- vdat$CAL_YR + vdat$CAL_QTR/4#
adat$YR_QTR <- adat$CAL_YR + adat$CAL_QTR/4#
#
#
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a prioud of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
trail_n <- 4#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,by=1,align="right",by=)))#
#
# calculate the sum of the inverse of the degrees of all accidentes per quarter per mine#
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(1/DEGREE_INJURY_CD))#
names(a_qtr) <- c(' MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE)#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr")
head(v_mine_qtr)
ggplot(head(v_mine_qtr, 200), aes(x=v_count_qtr,y=qtr_degree)) + geom_point()
ggplot(v_mine_qtr, aes(x=v_count_qtr,y=qtr_degree)) + geom_point()
summary(v_count_qtr)
summary(v_mine_qtr$v_count_qtr)
subset(v_mine_qtr, qtr_degree > 30)$MINE_NAME
subset(v_mine_qtr, qtr_degree > 30 & v_count_qtr > 500)
subset(v_mine_qtr, qtr_degree > 30 | v_count_qtr > 500)
head(subset(v_mine_qtr, qtr_degree > 30 | v_count_qtr > 500))
?merge
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a prioud of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
trail_n <- 4#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,by=1,align="right",by=)))#
#
# calculate the sum of the inverse of the degrees of all accidentes per quarter per mine#
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(1/DEGREE_INJURY_CD))#
names(a_qtr) <- c(' MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr")#
#
# plot violation count against accident degree#
ggplot(v_mine_qtr, aes(x=v_count_qtr,y=qtr_degree)) + geom_point()
#
# TODO: add severity of violation to this as a weight factor#
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a period of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
trail_n <- 4#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,by=1,align="right")))#
#
# calculate the sum of the inverse of the degrees of all accidentes per quarter per mine#
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(1/DEGREE_INJURY_CD))#
names(a_qtr) <- c(' MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr")#
#
# plot violation count against accident degree#
ggplot(v_mine_qtr, aes(x=v_count_qtr,y=qtr_degree)) + geom_point()
 v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))
head(v_mine_qtr)
head(a_qtr)
?merge
 v_mine_qtr <- merge(v_mine_qtr, a_qtr,by=c('MINE_ID', 'YR_QTR'),all.x=TRUE)
?merge
names(a_qtr)
names(v_mine_qtr)
names(a_qtr)[1] <- 'MINE_ID'
names(a_qtr)
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))
head(v_mine_qtr)
write.csv(v_mine_qtr, "./data/v_mine_qtr")
ggplot(v_mine_qtr, aes(x=v_count_qtr,y=qtr_degree)) + geom_point()
subset(v_mine_qtr, qtr_degree > 30)
ggplot(subset(v_mine_qtr, qtr_degree < 30), aes(x=v_count_qtr,y=qtr_degree)) + geom_point()
ggplot(subset(v_mine_qtr, qtr_degree < 30), aes(x=v_count_qtr,y=qtr_degree)) + geom_point()+stat_smooth()
subset(v_mine_qtr, v_count_qtr > 200)
head(mdat)
ls()
head(adat)
(adat$SUBUNIT)
head(mdat)
table(mdat(PRIMARY_CANVAS))
table(mdat$PRIMARY_CANVAS)
table(mdat$PRIMARY_CANVASS)
head(mdat)
table(mdat$CURRENT_MINE_TYPE)
head(v_mine_qtr)
head(vdat)
table(vdat$MINE_TYPE)
names(adat)
adat$MINE_TYPE
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a period of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
# Maybe this should exclude the current quarter? Use a 5-quarter window, then subtract the current quarter?#
trail_n <- 5#
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,by=1,align="right")))#
#
# calculate the sum of the inverse of the degrees of all accidentes per quarter per mine#
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(1/DEGREE_INJURY_CD))#
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr")#
#
# plot violation count against accident degree#
ggplot(v_mine_qtr, aes(x=v_count_qtr,y=qtr_degree)) + geom_point()
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a period of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
# Maybe this should exclude the current quarter? Use a 5-quarter window, then subtract the current quarter?#
trail_n <- 5
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,by=1,align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,align="right",by=-1)))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,align="right",by=1)))
trail_n
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,by=4,align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,by=0,align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,width=trail_n,FUN=sum,fill=NA,by=1,align="right")))
?rollapply
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,  width=trail_n, FUN=sum, fill=NA, align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,  width=trail_n, FUN=mean, fill=NA, align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,  width=trail_n, FUN=sum, fill=NA, align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,  width=2, FUN=sum, fill=NA, align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) data.frame(x, yr_vs=rollapply(x$v_count_qtr,  width=5, FUN=sum, fill=NA, align="right")))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) yr_vs=rollapply(x$v_count_qtr,  width=5, FUN=sum, fill=NA, align="right"))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) yr_vs=rollapply(x$v_count_qtr,  width=5, FUN=sum, fill=NA))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) yr_vs=rollapply(x$v_count_qtr,  width=5, FUN=sum, align="right"))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) yr_vs=rollapply(x$v_count_qtr,  width=5, FUN=sum, align="right"))
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) yr_vs=rollapply(x$v_count_qtr,  width=5, FUN=sum, fill=NA, align="right"))
head(v_mine_qtr)
?rollsum
v_mine_qtr <- ddply(v_mine_qtr,"MINE_ID",function(x) sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr))
head(v_mine_qtr)
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a period of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
# Maybe this should exclude the current quarter? Use a 5-quarter window, then subtract the current quarter?#
trail_n <- 5
v_mine_qtr <- ddply(head(v_mine_qtr , 100) ,"MINE_ID", transform, function(x) sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr))
v_mine_qtr
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a period of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
# Maybe this should exclude the current quarter? Use a 5-quarter window, then subtract the current quarter?#
trail_n <- 5#
v_mine_qtr <- ddply(head(v_mine_qtr , 100) ,"MINE_ID",  function(x) {v_trail_5qtr = sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr))
ddply(head(v_mine_qtr , 100) ,"MINE_ID",  function(x) {v_trail_5qtr = sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr)})
ddply(head(v_mine_qtr , 100) ,.("MINE_ID" , "YR_QTR"),  function(x) {v_trail_5qtr = sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr)})
ddply(head(v_mine_qtr , 100) ,.(MINE_ID , YR_QTR),  function(x) {v_trail_5qtr = sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr)})
ddply(head(v_mine_qtr , 100) ,.(MINE_ID , YR_QTR), transform,  function(x) {v_trail_5qtr = sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr)})
ddply(head(v_mine_qtr , 100) ,.(MINE_ID , YR_QTR), transform,  function(x) v_trail_5qtr = sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr))
ddply(head(v_mine_qtr , 100) ,.(MINE_ID , YR_QTR),  function(x) v_trail_5qtr = sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID , YR_QTR),  function(x) v_trail_5qtr = sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr))
head(v_mine_qtr, 10)
ddply(head(v_mine_qtr , 100) ,.(MINE_ID),  transform, function(x)  sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr))
head(v_mine_qtr, 10)
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x)  sum(subset(x , YR_QTR >= x$YR_QTR - 1.25)$v_count_qtr))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x)  sum(x[x$YR_QTR >= x$YR_QTR - 1.25] , c('v_count_qtr')]))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x)  sum(x[x$YR_QTR >= x$YR_QTR - 1.25 , c('v_count_qtr')]))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, sum(x[x$YR_QTR >= x$YR_QTR - 1.25 , c('v_count_qtr')]))
ddply(head(v_mine_qtr , 10) ,"MINE_ID",  transform, function(x) sum(x[x$YR_QTR >= x$YR_QTR - 1.25 , c('v_count_qtr')]))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x) sum(x$v_count_qtr))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x) v_sum=sum(x$v_count_qtr))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, sum(v_count_qtr))
ddply(head(v_mine_qtr , 10) ,"MINE_ID",  transform, sum(v_count_qtr))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, sum(v_count_qtr))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, newsum=sum(v_count_qtr))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x){newsum=sum(v_count_qtr)})
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x) newsum=sum(v_count_qtr) )
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x) c(newsum=sum(v_count_qtr) ))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, newsum=sum(v_count_qtr) )
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, newsum=sum(v_count_qtr[1:2]) )
?transform
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, newsum=sum(v_vount_qtr)[x$YR_QTR >= 2003.75]
)
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, newsum=sum(v_count_qtr)[x$YR_QTR >= 2003.75])
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, newsum=sum(v_count_qtr)[YR_QTR >= 2003.75])
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, newsum=sumdata.frame((v_count_qtr)[YR_QTR >= 2003.75]))
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, newsum=sum(data.frame(v_count_qtr)[YR_QTR >= 2003.75]))
ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(datc, x$YR_QTR>(YR_QTR-1) & x$YR_QTR < YR_QTR)$v_count_qtr))))
ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(datm, x$YR_QTR>(YR_QTR-1) & x$YR_QTR < YR_QTR)$v_count_qtr))))
ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(x, x$YR_QTR>(YR_QTR-1) & x$YR_QTR < YR_QTR)$v_count_qtr))))
ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(x, x$YR_QTR>(datm$YR_QTR-1) & x$YR_QTR < datm$YR_QTR)$v_count_qtr))))
ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(x, x$YR_QTR > (YR_QTR-1) & x$YR_QTR < YR_QTR)$v_count_qtr))))
str(dat)
dat <- data.frame(#
   category=c(rep('A',6), rep('B',6), rep('C',6)), #
   year=rep(c(2000,2001,2004,2005,2009, 2010),3), #
   incidents=rpois(18, 3)#
   )
ddply(dat, .(category), #
    function(datc) adply(datc, 1, #
         function(x) data.frame(run_incidents =#
                                sum(subset(datc, year>(x$year-2) & year<=x$year)$incidents))))
#
ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(datm, YR_QTR > (x$YR_QTR-2) & YR_QTR<=x$YR_QTR)$v_count_qtr))))
ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(datm, YR_QTR > (x$YR_QTR-1.25) & YR_QTR<x$YR_QTR)$v_count_qtr))))
ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(datm, YR_QTR > (x$YR_QTR-12.25) & YR_QTR<x$YR_QTR)$v_count_qtr))))
v_mine_qtr <- ddply(head(v_mine_qtr, 50 ), .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(datm, YR_QTR > (x$YR_QTR-12.25) & YR_QTR<x$YR_QTR)$v_count_qtr))))
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a period of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
# Maybe this should exclude the current quarter? Use a 5-quarter window, then subtract the current quarter?#
trail_n <- 5#
v_mine_qtr <- #
#
ddply(head(v_mine_qtr , 10) ,.(MINE_ID),  transform, function(x) sum(x[x$YR_QTR >= x$YR_QTR - 1.25 , c('v_count_qtr')]))#
#
#
#######  From StackOverflow.com#
##       http://stackoverflow.com/questions/8947952/rolling-sum-on-an-unbalanced-time-series#
#
#
v_mine_qtr <- ddply(v_mine_qtr, .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(datm, YR_QTR > (x$YR_QTR-12.25) & YR_QTR<x$YR_QTR)$v_count_qtr))))
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(1/DEGREE_INJURY_CD))#
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr")#
#
# plot violation count against accident degree#
ggplot(v_mine_qtr, aes(x=yr_vs,y=qtr_degree)) + geom_point()
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(1/DEGREE_INJURY_CD))#
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr")#
#
# plot lagged violation count against accident degree#
ggplot(v_mine_qtr, aes(x=v_lag3,y=qtr_degree)) + geom_point()
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(1/DEGREE_INJURY_CD))#
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr")#
#
# plot lagged violation count against accident degree#
ggplot(v_mine_qtr, aes(x=v_lag3,y=qtr_degree)) + geom_point()
head(v_mine_qtr)
head(adat)
head(a_qtr)
head(v_mine_qtr)
v_mine_qtr <- v_mine_qtr[,1:6]
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr.csv")
v_mine_qtr
a_qtr
head(a_qtr)
v_mine_qtr
nrow(vdat)
v_mine_qtr <- ddply(vdat, .(MINE_ID,MINE_NAME,VIOLATOR_NAME,YR_QTR), "nrow")#
names(v_mine_qtr) <- gsub("nrow","v_count_qtr",names(v_mine_qtr))#
#
# Use cumsum to calculate the number of violations in a period of trailing years trail_n#
v_mine_qtr <- v_mine_qtr[ order(v_mine_qtr$MINE_ID, v_mine_qtr$YR_QTR) ,]#
#
#example mine: 4604955#
#
# Annual rolling mean of quarterly violation count#
# ddply(v_mine_qtr[v_mine_qtr$MINE_ID==4604955,],"MINE_ID",function(x) data.frame(x, yr_vs=rollmean(x$v_count_qtr,trail_n,na.pad=TRUE,align="right")))#
#
# Cumulative violations in the trailing year#
# Maybe this should exclude the current quarter? Use a 5-quarter window, then subtract the current quarter?#
trail_n <- 5#
#
#######  From StackOverflow.com#
##       http://stackoverflow.com/questions/8947952/rolling-sum-on-an-unbalanced-time-series#
#
#
v_mine_qtr <- ddply(v_mine_qtr, .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag3 =#
                                sum(subset(datm, YR_QTR > (x$YR_QTR-12.25) & YR_QTR<x$YR_QTR)$v_count_qtr))))#
#
#
#
#
#
# calculate the sum of the inverse of the degrees of all accidentes per quarter per mine#
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(1/DEGREE_INJURY_CD))#
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr.csv")#
#
# plot lagged violation count against accident degree#
ggplot(v_mine_qtr, aes(x=v_lag3,y=qtr_degree)) + geom_point()
ggplot(subset(v_mine_qtr, qtr_degree<30), aes(x=v_lag3,y=qtr_degree)) + geom_point()
ggplot(subset(v_mine_qtr, qtr_degree<30), aes(x=v_lag3,y=qtr_degree)) + geom_point() + stat_smooth()
ggplot(subset(v_mine_qtr, qtr_degree<30), aes(x=v_lag3,y=log(qtr_degree))) + geom_point() + stat_smooth()
ggplot(subset(v_mine_qtr, qtr_degree<30), aes(x=log(v_lag3),y=log(qtr_degree))) + geom_point() + stat_smooth()
ggplot(subset(v_mine_qtr, qtr_degree<30), aes(x=log(v_lag3),y=log(qtr_degree))) + geom_point()
ggplot(v_mine_qtr, aes(x=v_lag3,y=qtr_degree)) + geom_point()
table(adat$DEGREE_INJURY_CD, adat$DEGREE_INJURY)
table(adat$DEGREE_INJURY, adat$DEGREE_INJURY_CD)
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(#
	                                                ifelse( DEGREE_INJURY_CD == 2, 2#
		                                               ifelse( DEGREE_INJURY_CD == 1, 3, 1)#
		                                               )#
	                  )#
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)
?elseif
?ifelse
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(#
	                                                ifelse( DEGREE_INJURY_CD == 2, 2#
		                                               ifelse( DEGREE_INJURY_CD == 1, 3, 1)#
		                                               )#
	                  )
adat$degree_rescale <-   ifelse( DEGREE_INJURY_CD == 2, 2#
       ifelse( DEGREE_INJURY_CD == 1, 3, 1)#
       )
adat$degree_rescale <-   ifelse( adat$DEGREE_INJURY_CD == 2, 2#
       ifelse( adat$DEGREE_INJURY_CD == 1, 3, 1)#
       )
str(adat$DEGREE_INJURY_CD)
adat$degree_rescale <-   ifelse( adat$DEGREE_INJURY_CD == 2, 2,#
       ifelse( adat$DEGREE_INJURY_CD == 1, 3, 1)#
       )
adat$degree_rescale <-   ifelse( adat$DEGREE_INJURY_CD == 2, 2,#
       ifelse( adat$DEGREE_INJURY_CD == 1, 3, 1)#
       )
#
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(degree_rescale )#
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')#
#
a_qtr <- subset(a_qtr, qtr_degree < Inf)#
#
#
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr.csv")#
#
# plot lagged violation count against accident degree#
ggplot(v_mine_qtr, aes(x=v_lag3,y=qtr_degree)) + geom_point()
head(adat)
table(adat$degree_rescale)
head(a_qtr)
a_qtr <- ddply(adat, .(MINE_ID, YR_QTR), summarize, sum(degree_rescale ))
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))#
#
write.csv(v_mine_qtr, "./data/v_mine_qtr.csv")#
#
# plot lagged violation count against accident degree#
ggplot(v_mine_qtr, aes(x=v_lag3,y=qtr_degree)) + geom_point()#
#
# without Big Branch#
ggplot(subset(v_mine_qtr, qtr_degree<30), aes(x=v_lag3,y=qtr_degree)) + geom_point() + stat_smooth()
head(v_mine_qtr)
v_mine_qtr <- v_mine_qtr[,1:6]
head(a_qtr)
names(a_qtr) <- c('MINE_ID','YR_QTR','qtr_degree')
head(a_qtr)
v_mine_qtr <- merge(v_mine_qtr, a_qtr, all.x=TRUE, by=c('MINE_ID', 'YR_QTR'))
write.csv(v_mine_qtr, "./data/v_mine_qtr.csv")
ggplot(v_mine_qtr, aes(x=v_lag3,y=qtr_degree)) + geom_point()
ggplot(v_mine_qtr, aes(x=v_lag3,y=qtr_degree)) + geom_point() + stat_smooth()
ggplot(subset(v_mine_qtr, qtr_degree<30), aes(x=v_lag3,y=qtr_degree)) + geom_point() + stat_smooth()
ggplot(subset(v_mine_qtr, qtr_degree<30), aes(x=v_lag3,y=qtr_degree)) + geom_point() + stat_smooth()
v_mine_qtr <- ddply(v_mine_qtr, .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag2 =#
		                                sum(subset(datm, YR_QTR > (x$YR_QTR-8.25) & YR_QTR<x$YR_QTR)$v_count_qtr))))
ggplot(v_mine_qtr, aes(x=v_lag3,y=v_lag2)) + geom_point()
v_mine_qtr <- ddply(v_mine_qtr, .(MINE_ID), #
    function(datm) adply(datm, 1, #
         function(x) data.frame(v_lag1 =#
		                                sum(subset(datm, YR_QTR > (x$YR_QTR-4.25) & YR_QTR<x$YR_QTR)$v_count_qtr))))
ggplot(subset(v_mine_qtr, qtr_degree<30)) + geom_point( aes(x=v_lag3,y=qtr_degree), color = 'red')
ggplot(subset(v_mine_qtr, qtr_degree<30)) + geom_point( aes(x=v_lag3,y=qtr_degree), color = 'red') + geom_point( aes(x=v_lag1,y=qtr_degree), color = 'black')
ggplot(subset(v_mine_qtr, qtr_degree<30)) + geom_point( aes(x=log(v_lag3),y=qtr_degree), color = 'red') + geom_point( aes(x=log(v_lag1),y=qtr_degree), color = 'black')
ggplot(subset(v_mine_qtr, qtr_degree<30)) + geom_point( aes(x=v_lag3,y=qtr_degree), color = 'red') + geom_point( aes(x=v_lag1,y=qtr_degree), color = 'black')
require(caret)
